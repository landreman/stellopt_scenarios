#!/usr/bin/env python3
import numpy as np

# Maximum values of the toroidal mode number n and the poloidal mode number m.
n_max = 3
m_max = 2

nfp = 5

Delta = np.zeros((n_max*2+1, m_max+1))
def set_element(arr, n, m, value):
    arr[n + n_max, m] = value

# Optimum for the 7 DoF problem:
set_element(Delta,-1, 0,-1.498476261706249E-002)
set_element(Delta, 0, 0, 1.0)
set_element(Delta, 1, 0, 1.331244953825667E-002)
set_element(Delta,-1, 1,-9.491502726031747E-002)
set_element(Delta, 0, 1, 10.0)
set_element(Delta, 1, 1, 1.111342639510550E-003)
set_element(Delta,-1, 2, 0.310930057294306)
set_element(Delta, 0, 2,-5.604048985502819E-003)
set_element(Delta, 1, 2,-7.089557472553538E-004)

set_element(Delta,-1, 0,-0.5) # x(1)
set_element(Delta, 1, 2,-0.447368421052632) # x(7)

#set_element(Delta,-1, 0,0.5) # x(1)
#set_element(Delta, 1, 2,0.5) # x(7)

figure_size = (7,7)

##############################################3
# End of input parameters
##############################################3

print("Here comes the Delta array:")
print(Delta)

# Convert from the Garabedian Delta coefficients to
# VMEC's RBC and ZBS coefficients:
def get_element(arr, n, m):
    return arr[n + n_max, m]

# LIBSTELL/Optimization/unique_boundary_PG.f uses the next few lines to scale everything:
rnorm = get_element(Delta,0,0) / get_element(Delta,0,1)
r00 = get_element(Delta,0,0)
set_element(Delta,0,0,1.0)

RBC = np.zeros((n_max*2+1, m_max+1))
ZBS = np.zeros((n_max*2+1, m_max+1))
for m in range(0, m_max+1):
    n_start = -n_max
    if m==0:
        n_start = 1
    for n in range(n_start, n_max+1):
        m_index = 1 - m
        term1 = 0
        term2 = 0
        if (m_index >= 0) and (m_index <= m_max):
            term1 = get_element(Delta,-n,m_index)
        m_index = 1 + m
        if (m_index >= 0) and (m_index <= m_max):
            term2 = get_element(Delta,n,m_index)
        # Eq (14) and (17) in https://terpconnect.umd.edu/~mattland/plasmanotes/toroidal_surface_parameterizations.pdf
        set_element(RBC, n, m, term1 + term2)
        set_element(ZBS, n, m, term1 - term2)

# Eq (12) in toroidal_surface_parameterizations.pdf
#set_element(RBC, 0, 0, get_element(Delta,0,1))

# Scaling from LIBSTELL/Optimization/unique_boundary_PG.f:
RBC *= rnorm
ZBS *= rnorm
set_element(RBC, 0, 0, r00)

print("Here comes the corresponding VMEC input data:")
for m in range(0, m_max+1):
    for n in range(-n_max, n_max+1):
        if get_element(RBC, n, m) != 0 or get_element(ZBS, n, m) != 0:
            print("RBC({:3d},{:3d}) = {:24.15E}   ZBS({:3d},{:3d}) = {:24.15E}".format(n,m,get_element(RBC,n,m),n,m,get_element(ZBS,n,m)))

##################################################
# Plot the resulting surface
##################################################

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

ntheta = 200
nphi = 4
theta = np.linspace(0,2*np.pi,num=ntheta)
phi = np.linspace(0,2*np.pi/nfp,num=nphi,endpoint=False)
R = np.zeros((ntheta,nphi))
Z = np.zeros((ntheta,nphi))
for itheta in range(ntheta):
    for iphi in range(nphi):
        for m in range(m_max+1):
            for n in range(-n_max, n_max+1):
                angle = m*theta[itheta] - nfp*n*phi[iphi]
                R[itheta,iphi] = R[itheta,iphi] + get_element(RBC,n,m)*np.cos(angle)
                Z[itheta,iphi] = Z[itheta,iphi] + get_element(ZBS,n,m)*np.sin(angle)

fig = plt.figure(figsize=figure_size)
fig.patch.set_facecolor('white')

numCols = 1
numRows = 1
plotNum = 1

plt.subplot(numRows,numCols,plotNum)
plotNum += 1
plt.plot(R[:,0], Z[:,0], '-',label=r'$\phi=0$')
plt.plot(R[:,1], Z[:,1], '-',label='1/4 period')
plt.plot(R[:,2], Z[:,2], '-',label='1/2 period')
plt.plot(R[:,3], Z[:,3], '-',label='3/4 period')
plt.gca().set_aspect('equal',adjustable='box')
plt.legend(fontsize='x-small')
plt.xlabel('R [meters]')
plt.ylabel('Z [meters]')

####################################################
# Now make 3D plot
####################################################

fig = plt.figure(figsize=(7,7))
fig.patch.set_facecolor('white')

ntheta = 40
nphi = 150
theta1D = np.linspace(0,2*np.pi,num=ntheta)
phi1D = np.linspace(0,2*np.pi,num=nphi)
phi2D, theta2D = np.meshgrid(phi1D,theta1D)
R = np.zeros((ntheta,nphi))
Z = np.zeros((ntheta,nphi))
for m in range(m_max+1):
    for n in range(-n_max, n_max+1):
        angle = m*theta2D - nfp*n*phi2D
        R = R + get_element(RBC,n,m)*np.cos(angle)
        Z = Z + get_element(ZBS,n,m)*np.sin(angle)

X = R * np.cos(phi2D)
Y = R * np.sin(phi2D)

# Zoom in:
factor=0.2
fig.subplots_adjust(bottom=-factor,top=1+factor,left=-factor,right=1+factor)

ax = fig.gca(projection='3d')
#ax.set_aspect('equal')

p = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, antialiased=False)
plt.xlabel('X [meters]')
plt.ylabel('Y [meters]')
#plt.zlabel('Z [meters]')

max_range = np.array([X.max()-X.min(), Y.max()-Y.min(), Z.max()-Z.min()]).max() / 2.0
mid_x = (X.max()+X.min()) * 0.5
mid_y = (Y.max()+Y.min()) * 0.5
mid_z = (Z.max()+Z.min()) * 0.5
ax.set_xlim(mid_x - max_range, mid_x + max_range)
ax.set_ylim(mid_y - max_range, mid_y + max_range)
ax.set_zlim(mid_z - max_range, mid_z + max_range)

plt.show()
